1.	История, современное состояние и перспективы развития веб-технологий
Веб-технологии начали с простых статических страниц на языке гипертекстовой разметки HyperText Markup Language (HTML), которые обслуживались без возможностей взаимодействия.
С появлением JavaScript и серверных языков, таких как PHP, сайты приобрели динамический характер, обрабатывая данные на сервере и обновляя содержимое без полной перезагрузки страницы.
Далее возникли одностраничные приложения Single-Page Application (SPA) и прогрессивные веб-приложения Progressive Web Application (PWA), объединяющие веб и мобильные функции.
В будущем ожидается широкое применение WebAssembly для выполнения кода на высоких скоростях и интеграция искусственного интеллекта для персонализации и автоматизации задач.

2.	Состав и характеристика аппаратно-программных составляющих веб-технологий
Аппаратная часть включает серверы на базе операционных систем (чаще всего Linux), сетевое оборудование и каналы передачи данных.
Программная часть состоит из веб-серверов (например, Apache или Nginx), систем управления базами данных (СУБД) на Structured Query Language (SQL) движках, языков программирования (PHP, Python, JavaScript) и фреймворков (Laravel, Django, React).

3.	Протокол передач Transmission Control Protocol/Internet Protocol (TCP/IP)
TCP/IP представляет собой набор сетевых протоколов для разделения данных на пакеты (Transmission Control Protocol) и их маршрутизации по сети (Internet Protocol). Этот стек обеспечивает надежную доставку, контроль ошибок и упорядочение пакетов, что является фундаментом работы интернета.

4.	Протокол HyperText Transfer Protocol (HTTP)
HTTP является прикладным протоколом клиент‑серверного обмена данными. Основные методы: GET для получения ресурсов и POST для отправки данных на сервер.
Обмен происходит без сохранения состояния (stateless), а заголовки (headers) определяют тип контента, кодировку и другие параметры.

5.	Инструментальные средства работы с СУБД MySQL
Для работы с MySQL используются командная строка MySQL Command Line Interface (CLI), графические оболочки MySQL Workbench и веб-интерфейс phpMyAdmin.
В PHP применяются расширения MySQLi (MySQL Improved) и PHP Data Objects (PDO) для подключения и выполнения запросов.

6.	Задачи веб‑доступа к базе данных и способы реализации
Основные операции Create (создание), Read (чтение), Update (обновление) и Delete (удаление) выполняются с помощью запросов на языке SQL.
Для их реализации в PHP применяются расширения MySQLi и PDO, а также возможно создание REST Application Programming Interface (API) для взаимодействия по протоколу HTTP.

7.	Объектно-ориентированный подход с базами данных в PHP
Object-Relational Mapping (ORM) позволяет описывать таблицы базы данных как классы в PHP и использовать объекты для выполнения SQL-запросов.
Это обеспечивает инкапсуляцию логики работы с данными и упрощает поддержку кода.

8.	Базовые методы взаимодействия HTML-формы со скриптом на PHP
Данные формы передаются на сервер через методы GET (параметры в URL) и POST (в теле запроса).
В PHP массивы $_GET и $_POST используются для получения значений полей, после чего выполняется валидация и обработка данных.

9.	Угрозы безопасности веб‑приложения и способы борьбы с ними
Cross-Site Scripting (XSS) позволяет злоумышленникам внедрять скрипты в страницы, SQL-инъекции дают доступ к базе данных, а Cross-Site Request Forgery (CSRF) инициирует несанкционированные действия от имени пользователя.
Защита включает экранирование вывода, подготовленные выражения (prepared statements) и использование токенов в формах.

10.	Способы создания изображений на веб‑страницах в PHP
Библиотека GD предоставляет функции imagecreate для создания изображения и imagepng для его сохранения в формате Portable Network Graphics (PNG).
Imagick, интерфейс к ImageMagick, поддерживает более широкий набор форматов и функций, таких как изменение размера и наложение эффектов.

11.	Понятие, назначение и управление сеансами в PHP
Сессии позволяют хранить данные пользователя между запросами.
Функция session_start создаёт или возобновляет сессию, а глобальный массив $_SESSION используется для сохранения информации.
Идентификатор сессии передаётся клиенту в виде cookie или через URL.

12.	Работа с cookie в PHP
Cookie хранят небольшие данные на стороне клиента. Функция setcookie задаёт имя, значение, время жизни и область видимости cookie.
Доступ к существующим cookie осуществляется через массив $_COOKIE.

13.	Назначение и особенности использования JavaScript
JavaScript выполняется в браузере и отвечает за динамическое изменение содержимого страницы, обработку событий (click, submit) и взаимодействие с пользователем.
Работа с Document Object Model (DOM) позволяет изменять структуру HTML в реальном времени.

14.	Особенности объектно‑ориентированной парадигмы в JavaScript
Изначально JavaScript использовал прототипное наследование, где объекты наследуют свойства от других объектов.
В стандарте ECMAScript 6 введены синтаксические классы, упрощающие описание конструкторов и методов.

15.	Структура и основные управляющие конструкции JavaScript
Переменные объявляются через var, let и const. Условия реализуются через if…else и switch, циклы — for, while и do…while, а функции объявляются как function или стрелочные (=>).

16.	Особенности работы с массивами в JavaScript
Массивы являются объектами с методами push для добавления, pop для удаления, map для преобразования, filter для фильтрации и reduce для аккумуляции значений в одно.

17.	Объектные модели веб‑документа и браузера в JavaScript
DOM представляет собой иерархическое дерево HTML-элементов для манипуляции содержимым.
Browser Object Model (BOM) предоставляет интерфейсы для работы с окном браузера, историей, адресной строкой и навигацией.

18.	Управление текстом, графикой и стилями в JavaScript
Canvas API позволяет рисовать на холсте с помощью методов рисования фигур и текстов.
CSS Object Model (CSSOM) даёт контроль над стилями, а SVG (Scalable Vector Graphics) используется для работы с векторной графикой.

19.	Классификация задач взаимодействия MySQL с PHP
Основные задачи: выборка данных через SELECT, вставка через INSERT, обновление через UPDATE и удаление через DELETE.
Каждая операция выполняется SQL-запросом, отправляемым через расширения MySQLi или PDO.

20.	Особенности процедурного и объектно‑ориентированного интерфейсов MySQL и PHP
Процедурный интерфейс (функции mysqli_connect, mysqli_query) прост, но менее гибок.
Объектно‑ориентированный интерфейс mysqli и PDO обеспечивает поддержку подготовленных запросов и упрощает обработку ошибок.

21.	Проблемы безопасности веб‑приложений и способы их решения
Повторение темы сопоставимо с пунктом 9: XSS устраняется экранированием HTML, SQL-инъекции — подготовленными запросами, CSRF — токенами.

22.	Особенности форматов изображений в веб‑приложениях
JPEG (Joint Photographic Experts Group) оптимален для фотографий с компрессией с потерями, PNG (Portable Network Graphics) поддерживает прозрачность и сжатие без потерь, GIF (Graphics Interchange Format) подходит для анимации и палитровых изображений.

23.	Задачи сессий и cookie в веб‑приложениях
Сессии используются для авторизации и хранения пользовательского состояния между запросами. Cookie дают возможность сохранять настройки и идентификаторы на стороне клиента.

24.	Системы управления контентом (Content Management System, CMS)
CMS бывают монолитные (единое ядро и интерфейсы) и headless (только backend без frontend). Популярные решения: WordPress, Joomla и Drupal, отличающиеся архитектурой и возможностями расширения.

25.	Joomla как CMS на PHP по архитектуре Model-View-Controller (MVC)
Joomla разделяет логику данных (Model), представление (View) и обработку запросов (Controller). Расширения включают компоненты, модули и плагины для добавления функциональности.

26.	Администрирование Joomla
Включает установку через установщик, обновление ядра и расширений, управление пользователями и группами, настройку прав доступа и обеспечение безопасности через регулярные патчи.

27.	Расширения в Joomla
Шаблоны (templates) определяют внешний вид, компоненты (components) — крупные функциональные модули, модули (modules) — боковые блоки, плагины (plugins) — события на уровне системы и контента.

28.	Установка и настройка сайта на Joomla в среде Linux, Apache, MySQL, PHP (LAMP)
Устанавливается веб-сервер Apache, СУБД MySQL, PHP и необходимые расширения. Далее загружается дистрибутив Joomla, создаётся база данных, настраиваются файлы конфигурации и публикуется контент через административную панель.
